plugins {
  id 'java'
  id 'maven-publish'
  id 'com.github.jruby-gradle.base' version "${jrubyGradlePluginVersion}"
}

repositories {
  ruby.gems()
  // for jruby gradle plugin
  gradlePluginPortal()
  // limit the use of the unidata artifacts server to the unidata jekyll theme and plugin
  exclusiveContent {
    forRepository {
      maven {
        url "https://artifacts.unidata.ucar.edu/repository/unidata-all/"
      }
    }
    filter {
      includeModule 'rubygems', 'unidata-jekyll-theme'
      includeModule 'rubygems', 'unidata-jekyll-plugins'
    }
  }
}

apply from: "$rootDir/gradle/any/publishing.gradle"
apply from: "$rootDir/gradle/any/java.gradle"
apply from: "$rootDir/gradle/any/archiving.gradle"

ext.title = 'Jekyll Gems'
project.description = 'JRuby environment for running Jekyll to generate Unidata documentation sets.'

sourceSets {
  main {
    output.dir(tasks.jrubyPrepare.outputDir)
  }
}

classes.dependsOn tasks.getByName('jrubyPrepare')

dependencies {
  // jekyll 4.x moved to using sassc (relies on c extension code) over sass (pure ruby version)
  // We will stay on jekyll 3.x until sassc works with jruby
  // see https://github.com/sass/sassc-ruby/issues/182
  gems 'rubygems:jekyll:3.8.7'
  gems 'rubygems:minima:2.5.1'
  gems 'rubygems:jekyll-feed:0.15.1'
  gems 'rubygems:jekyll-seo-tag:2.7.1'
  gems "rubygems:unidata-jekyll-theme:${unidataThemeVersion}"
  gems "rubygems:unidata-jekyll-plugins:${unidataThemePluginVersion}"
}

def baseExcludes = ['build_info', 'doc/', 'extensions/', 'cache/']
def gemJarCompleteTask = tasks.create('gemJarComplete', Jar) {
  from files(sourceSets.main.output)
  exclude baseExcludes
}

def gemJarMinTask = tasks.create('gemJarMin', Jar) {
  from files(sourceSets.main.output)
  exclude baseExcludes
  exclude '**/*unidata-jekyll-theme*', '**/*unidata-jekyll-plugin*'
  archiveBaseName.set(archiveBaseName.get() + '-minimum')
}

publishing {
  publications {
    gemJarsMin(MavenPublication) {
      //afterEvaluate {
      //  artifactId gemJarMinTask.archiveBaseName.get()
      //}
      artifactId "${-> gemJarMinTask.archiveBaseName.get()}"
      artifact gemJarMinTask
      pom {
        description = "Base ${project.description}"
        url = project.url
      }
    }
    gemJarsComplete(MavenPublication) {
      artifact gemJarCompleteTask
      pom {
        description = project.description
        url = project.url
      }
    }
  }
}

