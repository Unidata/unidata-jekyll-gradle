plugins {
  id 'groovy'
  id 'java-gradle-plugin' // Adds gradleApi() compile dep and gradleTestKit() testCompile dep.
  id 'jacoco'
  id 'maven-publish'
  id 'com.github.jruby-gradle.base' version "${jrubyGradlePluginVersion}"
}

ext.title = 'Jekyll Gradle plugin for use at UCAR/Unidata'
project.description = 'Gradle plugin for using Jekyll to generate Unidata documentation sets.'

repositories {
  jcenter()
  mavenCentral()  // JCenter isn't quite a superset of Maven Central.
}

gradlePlugin {
  plugins {
    jekyllPlugin {
      id = 'edu.ucar.unidata.site.jekyll'
      displayName = 'Plugin for building Jekyll based websites.'
      description = 'A gradle plugin for building jekyll based websites using the Unidata Jekyll Theme and Plugins.'
      implementationClass = 'edu.ucar.unidata.site.jekyll.UnidataJekyllPlugin'
    }
  }
}

dependencies {
  implementation "com.github.jruby-gradle:jruby-gradle-plugin:${jrubyGradlePluginVersion}" // for jekyll plugin
  runtimeOnly project(':jekyll-gems')

  testImplementation gradleTestKit()
  testImplementation 'org.slf4j:slf4j-api:1.7.28'
  testImplementation 'commons-io:commons-io:2.5'

  //testRuntimeOnly 'ch.qos.logback:logback-classic:1.2.3'

  // We need to make sure the version of spock is compatible with the version of groovy being used by the plugin
  // project. If the version of groovy changes (because we update gradle), we should make sure to find a spock
  // version that works.
  testImplementation('org.spockframework:spock-core:1.3-groovy-2.5') {
    // The Gradle API drags in the bundled version of Groovy that Gradle ships with (localGroovy()) â€“
    // see https://discuss.gradle.org/t/unable-to-force-gradle-to-use-groovy-2-0-0-for-the-project/7021.
    // Spock drags in another Groovy as a transitive dependency.
    //
    // So, there are multiple candidate versions of the Groovy dependency. Ordinarily, this is no problem for
    // Gradle; it has version-conflict-resolution machinery to deal with it. However, localGroovy() is a special
    // kind of dependency that doesn't participate in that resolution (again, see above URL).
    //
    // Once added to a configuration, localGroovy() will remain part of it no matter what. Furthermore, since
    // localGroovy() is "special", Gradle will not consider a second, "normal" Groovy dependency to be in conflict
    // with it. This can result in two different versions of Groovy in the same configuration, and ultimately
    // errors like: "groovy.lang.GroovyRuntimeException: Conflicting module versions. Module [groovy-all is loaded
    // in version 2.4.4 and you are trying to load version 2.4.1".
    //
    // Our solution is to explicitly exclude any other Groovy dependencies whenever localGroovy() is already part
    // of the configuration.
    exclude module: 'groovy-all'
  }
}

def copyUnidataPropertiesFile = tasks.register('copyUnidataPropertiesFile', Copy) {
  from "${rootProject.layout.projectDirectory}/gradle.properties"
  into "${project.layout.buildDirectory.get()}/resources/main/unidata-jekyll-plugin-info/"
}

processResources.dependsOn copyUnidataPropertiesFile
